# -*- coding: utf-8 -*-
"""Unit_Testing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/samkamau81/Accenture-Nordics-Developer-Virtual-Experience-Program/blob/main/Unit_Testing.ipynb
"""

import re 

# Question 1: -----------------------------------
regex = r'^[a-z0-9]+[\._]?[a-z0-9]+[@]\w+[.]\w+$'

def check_email(email):  
    if(re.search(regex,email)):  
        return True          
    else:  
        return False 

    assert ((check_email(email)==True) or (check_email(email)==False)) is True

def check_psw_upper(psw):
  result = any(char.isupper() for char in psw)
  return result
  
  assert (check_psw_upper(psw)==result) is True

def check_psw_digit(psw):
  result = any(char.isdigit() for char in psw)
  return result
  
  assert (check_psw_digit(psw)==result) is True

def check_psw_lower(psw):
  result = any(char.isupper() for char in psw)
  return result
  
  assert (check_psw_lower(psw)==result) is True

def check_psw(psw):
  if(check_psw_digit(psw)
            and check_psw_upper(psw)
            and check_psw_lower(psw)
            and check_psw_digit(psw)
            and len(psw) >= 7):
    print("Valid password")
    return True
  else:
    print("Invalid password")    
    return False    

  assert ((check_psw(psw)==True) or check_psw(psw)==False) is True

# New functions: ------------------------------------
def check_psw_equal(psw1, psw2):
  return psw1 == psw2

  assert (check_psw_equal(psw1,psw2)==True) is True

def check_credentials(email, psw1, psw2):
  return check_email(email) and check_psw(psw1) and check_psw_equal(psw1, psw2)

  assert (check_credentials(email,psw1,psw2)==True) is True

#Tests to question 1: -------------------------------
def test_email1():
  email = "myname326@gmail.com"
  assert check_email(email) is True

def test_email2():
  email = "my.ownsite@acn.org"
  assert check_email(email) is True

def test_email3():
  email = "myname326.com"
  assert check_email(email) is False

def test_check_psw1():
  psw = "Qwert1234"
  assert check_psw(psw) is True

def test_check_psw2():
  psw = "qwert"
  assert check_psw(psw) is False

def test_check_psw3():
  psw = "QWERT55"
  assert check_psw(psw) is False
  
def test_check_psw4():
  psw = "Qwerty"
  assert check_psw(psw) is False
  
def test_check_psw5():
  psw = "551234"
  assert check_psw(psw) is False

def test_check_psw6():
  psw = "Qwerty$£@55"
  assert check_psw(psw) is True

def test_check_psw7():
  psw = "Qwerty$£@"
  assert check_psw(psw) is False

def test_check_psw8():
  psw = "Qwert5@"
  assert check_psw(psw) is False

def test_psw_equal1():
    ans = True
    assert (check_psw_equal(psw1, psw2) == ans) is True


def test_psw_equal2():
    ans=False
    assert (check_psw_upper(psw1) == ans) is False
    assert (check_psw_lower(psw1)== ans ) is False


def test_psw_equal3():
    ans=False
    assert (check_psw_equal(psw1,psw2) ==ans) is False


def test_check_credentials1():
    ans=True
    assert (check_psw_equal(psw1,psw2)==ans) is True
    assert (check_email(psw1)== ans) is True
    assert (check_credentials(email,psw1,psw2)==ans) is True
    return True

def test_check_credentials2 ():
    ans1=True
    ans2=False
    assert (check_psw_equal(psw1,psw2)==ans2) is False
    assert (check_email(email)==ans1) is True
    assert (check_credentials(email,psw1,psw2)==ans1) is True


def test_check_credentials3():
    ans1=True
    ans2=False
    assert (check_psw_equal(psw1,psw2)==ans1) is True
    assert (check_email(email)==ans2) is False
    assert (check_credentials(email,psw1,psw2)==ans2) is False